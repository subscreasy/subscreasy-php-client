<?php
/**
 * ServiceInstance
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Api Documentation
 *
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\com.kodfarki.subscreasy.client.model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ServiceInstance Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ServiceInstance implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ServiceInstance';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'capacity' => 'float',
        'current_usage' => 'float',
        'end_date' => '\DateTime',
        'id' => 'int',
        'name' => 'string',
        'number_of_units' => 'int',
        'offer' => '\Swagger\Client\com.kodfarki.subscreasy.client.model\Offer',
        'over_usage' => 'float',
        'over_usage_quota' => 'float',
        'quota_origin' => 'string',
        'service_offering' => '\Swagger\Client\com.kodfarki.subscreasy.client.model\ServiceOffering',
        'service_type' => 'string',
        'start_date' => '\DateTime',
        'status' => 'string',
        'subscriber_id' => 'string',
        'subscription' => '\Swagger\Client\com.kodfarki.subscreasy.client.model\Subsription',
        'type' => 'string',
        'version' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'capacity' => null,
        'current_usage' => null,
        'end_date' => 'date-time',
        'id' => 'int64',
        'name' => null,
        'number_of_units' => 'int32',
        'offer' => null,
        'over_usage' => null,
        'over_usage_quota' => null,
        'quota_origin' => null,
        'service_offering' => null,
        'service_type' => null,
        'start_date' => 'date-time',
        'status' => null,
        'subscriber_id' => null,
        'subscription' => null,
        'type' => null,
        'version' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'capacity' => 'capacity',
        'current_usage' => 'currentUsage',
        'end_date' => 'endDate',
        'id' => 'id',
        'name' => 'name',
        'number_of_units' => 'numberOfUnits',
        'offer' => 'offer',
        'over_usage' => 'overUsage',
        'over_usage_quota' => 'overUsageQuota',
        'quota_origin' => 'quotaOrigin',
        'service_offering' => 'serviceOffering',
        'service_type' => 'serviceType',
        'start_date' => 'startDate',
        'status' => 'status',
        'subscriber_id' => 'subscriberId',
        'subscription' => 'subscription',
        'type' => 'type',
        'version' => 'version'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'capacity' => 'setCapacity',
        'current_usage' => 'setCurrentUsage',
        'end_date' => 'setEndDate',
        'id' => 'setId',
        'name' => 'setName',
        'number_of_units' => 'setNumberOfUnits',
        'offer' => 'setOffer',
        'over_usage' => 'setOverUsage',
        'over_usage_quota' => 'setOverUsageQuota',
        'quota_origin' => 'setQuotaOrigin',
        'service_offering' => 'setServiceOffering',
        'service_type' => 'setServiceType',
        'start_date' => 'setStartDate',
        'status' => 'setStatus',
        'subscriber_id' => 'setSubscriberId',
        'subscription' => 'setSubscription',
        'type' => 'setType',
        'version' => 'setVersion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'capacity' => 'getCapacity',
        'current_usage' => 'getCurrentUsage',
        'end_date' => 'getEndDate',
        'id' => 'getId',
        'name' => 'getName',
        'number_of_units' => 'getNumberOfUnits',
        'offer' => 'getOffer',
        'over_usage' => 'getOverUsage',
        'over_usage_quota' => 'getOverUsageQuota',
        'quota_origin' => 'getQuotaOrigin',
        'service_offering' => 'getServiceOffering',
        'service_type' => 'getServiceType',
        'start_date' => 'getStartDate',
        'status' => 'getStatus',
        'subscriber_id' => 'getSubscriberId',
        'subscription' => 'getSubscription',
        'type' => 'getType',
        'version' => 'getVersion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const QUOTA_ORIGIN_SUBS = 'SUBS';
    const QUOTA_ORIGIN_OVER = 'OVER';
    const SERVICE_TYPE_ONOFF = 'ONOFF';
    const SERVICE_TYPE_SEAT_BASED = 'SEAT_BASED';
    const SERVICE_TYPE_USAGE_BASED = 'USAGE_BASED';
    const STATUS__NEW = 'NEW';
    const STATUS_ACTIVE = 'ACTIVE';
    const STATUS_SUSPENDED = 'SUSPENDED';
    const STATUS_FINISHED = 'FINISHED';
    const STATUS_CANCELLED = 'CANCELLED';
    const TYPE_ONOFF = 'ONOFF';
    const TYPE_SEAT_BASED = 'SEAT_BASED';
    const TYPE_USAGE_BASED = 'USAGE_BASED';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getQuotaOriginAllowableValues()
    {
        return [
            self::QUOTA_ORIGIN_SUBS,
            self::QUOTA_ORIGIN_OVER,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getServiceTypeAllowableValues()
    {
        return [
            self::SERVICE_TYPE_ONOFF,
            self::SERVICE_TYPE_SEAT_BASED,
            self::SERVICE_TYPE_USAGE_BASED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS__NEW,
            self::STATUS_ACTIVE,
            self::STATUS_SUSPENDED,
            self::STATUS_FINISHED,
            self::STATUS_CANCELLED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_ONOFF,
            self::TYPE_SEAT_BASED,
            self::TYPE_USAGE_BASED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['capacity'] = isset($data['capacity']) ? $data['capacity'] : null;
        $this->container['current_usage'] = isset($data['current_usage']) ? $data['current_usage'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['number_of_units'] = isset($data['number_of_units']) ? $data['number_of_units'] : null;
        $this->container['offer'] = isset($data['offer']) ? $data['offer'] : null;
        $this->container['over_usage'] = isset($data['over_usage']) ? $data['over_usage'] : null;
        $this->container['over_usage_quota'] = isset($data['over_usage_quota']) ? $data['over_usage_quota'] : null;
        $this->container['quota_origin'] = isset($data['quota_origin']) ? $data['quota_origin'] : null;
        $this->container['service_offering'] = isset($data['service_offering']) ? $data['service_offering'] : null;
        $this->container['service_type'] = isset($data['service_type']) ? $data['service_type'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['subscriber_id'] = isset($data['subscriber_id']) ? $data['subscriber_id'] : null;
        $this->container['subscription'] = isset($data['subscription']) ? $data['subscription'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getQuotaOriginAllowableValues();
        if (!in_array($this->container['quota_origin'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'quota_origin', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getServiceTypeAllowableValues();
        if (!in_array($this->container['service_type'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'service_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($this->container['status'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($this->container['type'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowedValues = $this->getQuotaOriginAllowableValues();
        if (!in_array($this->container['quota_origin'], $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getServiceTypeAllowableValues();
        if (!in_array($this->container['service_type'], $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($this->container['status'], $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($this->container['type'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets capacity
     *
     * @return float
     */
    public function getCapacity()
    {
        return $this->container['capacity'];
    }

    /**
     * Sets capacity
     *
     * @param float $capacity capacity
     *
     * @return $this
     */
    public function setCapacity($capacity)
    {
        $this->container['capacity'] = $capacity;

        return $this;
    }

    /**
     * Gets current_usage
     *
     * @return float
     */
    public function getCurrentUsage()
    {
        return $this->container['current_usage'];
    }

    /**
     * Sets current_usage
     *
     * @param float $current_usage current_usage
     *
     * @return $this
     */
    public function setCurrentUsage($current_usage)
    {
        $this->container['current_usage'] = $current_usage;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime $end_date end_date
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets number_of_units
     *
     * @return int
     */
    public function getNumberOfUnits()
    {
        return $this->container['number_of_units'];
    }

    /**
     * Sets number_of_units
     *
     * @param int $number_of_units number_of_units
     *
     * @return $this
     */
    public function setNumberOfUnits($number_of_units)
    {
        $this->container['number_of_units'] = $number_of_units;

        return $this;
    }

    /**
     * Gets offer
     *
     * @return \Swagger\Client\com.kodfarki.subscreasy.client.model\Offer
     */
    public function getOffer()
    {
        return $this->container['offer'];
    }

    /**
     * Sets offer
     *
     * @param \Swagger\Client\com.kodfarki.subscreasy.client.model\Offer $offer offer
     *
     * @return $this
     */
    public function setOffer($offer)
    {
        $this->container['offer'] = $offer;

        return $this;
    }

    /**
     * Gets over_usage
     *
     * @return float
     */
    public function getOverUsage()
    {
        return $this->container['over_usage'];
    }

    /**
     * Sets over_usage
     *
     * @param float $over_usage over_usage
     *
     * @return $this
     */
    public function setOverUsage($over_usage)
    {
        $this->container['over_usage'] = $over_usage;

        return $this;
    }

    /**
     * Gets over_usage_quota
     *
     * @return float
     */
    public function getOverUsageQuota()
    {
        return $this->container['over_usage_quota'];
    }

    /**
     * Sets over_usage_quota
     *
     * @param float $over_usage_quota over_usage_quota
     *
     * @return $this
     */
    public function setOverUsageQuota($over_usage_quota)
    {
        $this->container['over_usage_quota'] = $over_usage_quota;

        return $this;
    }

    /**
     * Gets quota_origin
     *
     * @return string
     */
    public function getQuotaOrigin()
    {
        return $this->container['quota_origin'];
    }

    /**
     * Sets quota_origin
     *
     * @param string $quota_origin quota_origin
     *
     * @return $this
     */
    public function setQuotaOrigin($quota_origin)
    {
        $allowedValues = $this->getQuotaOriginAllowableValues();
        if (!is_null($quota_origin) && !in_array($quota_origin, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'quota_origin', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['quota_origin'] = $quota_origin;

        return $this;
    }

    /**
     * Gets service_offering
     *
     * @return \Swagger\Client\com.kodfarki.subscreasy.client.model\ServiceOffering
     */
    public function getServiceOffering()
    {
        return $this->container['service_offering'];
    }

    /**
     * Sets service_offering
     *
     * @param \Swagger\Client\com.kodfarki.subscreasy.client.model\ServiceOffering $service_offering service_offering
     *
     * @return $this
     */
    public function setServiceOffering($service_offering)
    {
        $this->container['service_offering'] = $service_offering;

        return $this;
    }

    /**
     * Gets service_type
     *
     * @return string
     */
    public function getServiceType()
    {
        return $this->container['service_type'];
    }

    /**
     * Sets service_type
     *
     * @param string $service_type service_type
     *
     * @return $this
     */
    public function setServiceType($service_type)
    {
        $allowedValues = $this->getServiceTypeAllowableValues();
        if (!is_null($service_type) && !in_array($service_type, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'service_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['service_type'] = $service_type;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime $start_date start_date
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets subscriber_id
     *
     * @return string
     */
    public function getSubscriberId()
    {
        return $this->container['subscriber_id'];
    }

    /**
     * Sets subscriber_id
     *
     * @param string $subscriber_id subscriber_id
     *
     * @return $this
     */
    public function setSubscriberId($subscriber_id)
    {
        $this->container['subscriber_id'] = $subscriber_id;

        return $this;
    }

    /**
     * Gets subscription
     *
     * @return \Swagger\Client\com.kodfarki.subscreasy.client.model\Subsription
     */
    public function getSubscription()
    {
        return $this->container['subscription'];
    }

    /**
     * Sets subscription
     *
     * @param \Swagger\Client\com.kodfarki.subscreasy.client.model\Subsription $subscription subscription
     *
     * @return $this
     */
    public function setSubscription($subscription)
    {
        $this->container['subscription'] = $subscription;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets version
     *
     * @return int
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param int $version version
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


