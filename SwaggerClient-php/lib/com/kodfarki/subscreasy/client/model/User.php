<?php
/**
 * User
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Api Documentation
 *
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\com.kodfarki.subscreasy.client.model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * User Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class User implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'User';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'activated' => 'bool',
        'authorities' => '\Swagger\Client\com.kodfarki.subscreasy.client.model\Authority[]',
        'company' => '\Swagger\Client\com.kodfarki.subscreasy.client.model\Company',
        'created_date' => '\DateTime',
        'email' => 'string',
        'first_name' => 'string',
        'id' => 'int',
        'image_url' => 'string',
        'lang_key' => 'string',
        'last_modified_date' => '\DateTime',
        'last_name' => 'string',
        'login' => 'string',
        'reset_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'activated' => null,
        'authorities' => null,
        'company' => null,
        'created_date' => 'date-time',
        'email' => null,
        'first_name' => null,
        'id' => 'int64',
        'image_url' => null,
        'lang_key' => null,
        'last_modified_date' => 'date-time',
        'last_name' => null,
        'login' => null,
        'reset_date' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'activated' => 'activated',
        'authorities' => 'authorities',
        'company' => 'company',
        'created_date' => 'createdDate',
        'email' => 'email',
        'first_name' => 'firstName',
        'id' => 'id',
        'image_url' => 'imageUrl',
        'lang_key' => 'langKey',
        'last_modified_date' => 'lastModifiedDate',
        'last_name' => 'lastName',
        'login' => 'login',
        'reset_date' => 'resetDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'activated' => 'setActivated',
        'authorities' => 'setAuthorities',
        'company' => 'setCompany',
        'created_date' => 'setCreatedDate',
        'email' => 'setEmail',
        'first_name' => 'setFirstName',
        'id' => 'setId',
        'image_url' => 'setImageUrl',
        'lang_key' => 'setLangKey',
        'last_modified_date' => 'setLastModifiedDate',
        'last_name' => 'setLastName',
        'login' => 'setLogin',
        'reset_date' => 'setResetDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'activated' => 'getActivated',
        'authorities' => 'getAuthorities',
        'company' => 'getCompany',
        'created_date' => 'getCreatedDate',
        'email' => 'getEmail',
        'first_name' => 'getFirstName',
        'id' => 'getId',
        'image_url' => 'getImageUrl',
        'lang_key' => 'getLangKey',
        'last_modified_date' => 'getLastModifiedDate',
        'last_name' => 'getLastName',
        'login' => 'getLogin',
        'reset_date' => 'getResetDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['activated'] = isset($data['activated']) ? $data['activated'] : null;
        $this->container['authorities'] = isset($data['authorities']) ? $data['authorities'] : null;
        $this->container['company'] = isset($data['company']) ? $data['company'] : null;
        $this->container['created_date'] = isset($data['created_date']) ? $data['created_date'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['image_url'] = isset($data['image_url']) ? $data['image_url'] : null;
        $this->container['lang_key'] = isset($data['lang_key']) ? $data['lang_key'] : null;
        $this->container['last_modified_date'] = isset($data['last_modified_date']) ? $data['last_modified_date'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['login'] = isset($data['login']) ? $data['login'] : null;
        $this->container['reset_date'] = isset($data['reset_date']) ? $data['reset_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['activated'] === null) {
            $invalidProperties[] = "'activated' can't be null";
        }
        if (!is_null($this->container['email']) && (strlen($this->container['email']) > 100)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['email']) && (strlen($this->container['email']) < 5)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be bigger than or equal to 5.";
        }

        if (!is_null($this->container['first_name']) && (strlen($this->container['first_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'first_name', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['first_name']) && (strlen($this->container['first_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'first_name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['image_url']) && (strlen($this->container['image_url']) > 256)) {
            $invalidProperties[] = "invalid value for 'image_url', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['image_url']) && (strlen($this->container['image_url']) < 0)) {
            $invalidProperties[] = "invalid value for 'image_url', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['lang_key']) && (strlen($this->container['lang_key']) > 5)) {
            $invalidProperties[] = "invalid value for 'lang_key', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['lang_key']) && (strlen($this->container['lang_key']) < 2)) {
            $invalidProperties[] = "invalid value for 'lang_key', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['last_name']) && (strlen($this->container['last_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'last_name', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['last_name']) && (strlen($this->container['last_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'last_name', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['login'] === null) {
            $invalidProperties[] = "'login' can't be null";
        }
        if ((strlen($this->container['login']) > 50)) {
            $invalidProperties[] = "invalid value for 'login', the character length must be smaller than or equal to 50.";
        }

        if ((strlen($this->container['login']) < 1)) {
            $invalidProperties[] = "invalid value for 'login', the character length must be bigger than or equal to 1.";
        }

        if (!preg_match("/^[_'.@A-Za-z0-9-]*$/", $this->container['login'])) {
            $invalidProperties[] = "invalid value for 'login', must be conform to the pattern /^[_'.@A-Za-z0-9-]*$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['activated'] === null) {
            return false;
        }
        if (strlen($this->container['email']) > 100) {
            return false;
        }
        if (strlen($this->container['email']) < 5) {
            return false;
        }
        if (strlen($this->container['first_name']) > 50) {
            return false;
        }
        if (strlen($this->container['first_name']) < 0) {
            return false;
        }
        if (strlen($this->container['image_url']) > 256) {
            return false;
        }
        if (strlen($this->container['image_url']) < 0) {
            return false;
        }
        if (strlen($this->container['lang_key']) > 5) {
            return false;
        }
        if (strlen($this->container['lang_key']) < 2) {
            return false;
        }
        if (strlen($this->container['last_name']) > 50) {
            return false;
        }
        if (strlen($this->container['last_name']) < 0) {
            return false;
        }
        if ($this->container['login'] === null) {
            return false;
        }
        if (strlen($this->container['login']) > 50) {
            return false;
        }
        if (strlen($this->container['login']) < 1) {
            return false;
        }
        if (!preg_match("/^[_'.@A-Za-z0-9-]*$/", $this->container['login'])) {
            return false;
        }
        return true;
    }


    /**
     * Gets activated
     *
     * @return bool
     */
    public function getActivated()
    {
        return $this->container['activated'];
    }

    /**
     * Sets activated
     *
     * @param bool $activated activated
     *
     * @return $this
     */
    public function setActivated($activated)
    {
        $this->container['activated'] = $activated;

        return $this;
    }

    /**
     * Gets authorities
     *
     * @return \Swagger\Client\com.kodfarki.subscreasy.client.model\Authority[]
     */
    public function getAuthorities()
    {
        return $this->container['authorities'];
    }

    /**
     * Sets authorities
     *
     * @param \Swagger\Client\com.kodfarki.subscreasy.client.model\Authority[] $authorities authorities
     *
     * @return $this
     */
    public function setAuthorities($authorities)
    {
        $this->container['authorities'] = $authorities;

        return $this;
    }

    /**
     * Gets company
     *
     * @return \Swagger\Client\com.kodfarki.subscreasy.client.model\Company
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param \Swagger\Client\com.kodfarki.subscreasy.client.model\Company $company company
     *
     * @return $this
     */
    public function setCompany($company)
    {
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return \DateTime
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param \DateTime $created_date created_date
     *
     * @return $this
     */
    public function setCreatedDate($created_date)
    {
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        if (!is_null($email) && (strlen($email) > 100)) {
            throw new \InvalidArgumentException('invalid length for $email when calling User., must be smaller than or equal to 100.');
        }
        if (!is_null($email) && (strlen($email) < 5)) {
            throw new \InvalidArgumentException('invalid length for $email when calling User., must be bigger than or equal to 5.');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name first_name
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        if (!is_null($first_name) && (strlen($first_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $first_name when calling User., must be smaller than or equal to 50.');
        }
        if (!is_null($first_name) && (strlen($first_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $first_name when calling User., must be bigger than or equal to 0.');
        }

        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets image_url
     *
     * @return string
     */
    public function getImageUrl()
    {
        return $this->container['image_url'];
    }

    /**
     * Sets image_url
     *
     * @param string $image_url image_url
     *
     * @return $this
     */
    public function setImageUrl($image_url)
    {
        if (!is_null($image_url) && (strlen($image_url) > 256)) {
            throw new \InvalidArgumentException('invalid length for $image_url when calling User., must be smaller than or equal to 256.');
        }
        if (!is_null($image_url) && (strlen($image_url) < 0)) {
            throw new \InvalidArgumentException('invalid length for $image_url when calling User., must be bigger than or equal to 0.');
        }

        $this->container['image_url'] = $image_url;

        return $this;
    }

    /**
     * Gets lang_key
     *
     * @return string
     */
    public function getLangKey()
    {
        return $this->container['lang_key'];
    }

    /**
     * Sets lang_key
     *
     * @param string $lang_key lang_key
     *
     * @return $this
     */
    public function setLangKey($lang_key)
    {
        if (!is_null($lang_key) && (strlen($lang_key) > 5)) {
            throw new \InvalidArgumentException('invalid length for $lang_key when calling User., must be smaller than or equal to 5.');
        }
        if (!is_null($lang_key) && (strlen($lang_key) < 2)) {
            throw new \InvalidArgumentException('invalid length for $lang_key when calling User., must be bigger than or equal to 2.');
        }

        $this->container['lang_key'] = $lang_key;

        return $this;
    }

    /**
     * Gets last_modified_date
     *
     * @return \DateTime
     */
    public function getLastModifiedDate()
    {
        return $this->container['last_modified_date'];
    }

    /**
     * Sets last_modified_date
     *
     * @param \DateTime $last_modified_date last_modified_date
     *
     * @return $this
     */
    public function setLastModifiedDate($last_modified_date)
    {
        $this->container['last_modified_date'] = $last_modified_date;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name last_name
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        if (!is_null($last_name) && (strlen($last_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $last_name when calling User., must be smaller than or equal to 50.');
        }
        if (!is_null($last_name) && (strlen($last_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $last_name when calling User., must be bigger than or equal to 0.');
        }

        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets login
     *
     * @return string
     */
    public function getLogin()
    {
        return $this->container['login'];
    }

    /**
     * Sets login
     *
     * @param string $login login
     *
     * @return $this
     */
    public function setLogin($login)
    {
        if ((strlen($login) > 50)) {
            throw new \InvalidArgumentException('invalid length for $login when calling User., must be smaller than or equal to 50.');
        }
        if ((strlen($login) < 1)) {
            throw new \InvalidArgumentException('invalid length for $login when calling User., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[_'.@A-Za-z0-9-]*$/", $login))) {
            throw new \InvalidArgumentException("invalid value for $login when calling User., must conform to the pattern /^[_'.@A-Za-z0-9-]*$/.");
        }

        $this->container['login'] = $login;

        return $this;
    }

    /**
     * Gets reset_date
     *
     * @return \DateTime
     */
    public function getResetDate()
    {
        return $this->container['reset_date'];
    }

    /**
     * Sets reset_date
     *
     * @param \DateTime $reset_date reset_date
     *
     * @return $this
     */
    public function setResetDate($reset_date)
    {
        $this->container['reset_date'] = $reset_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


