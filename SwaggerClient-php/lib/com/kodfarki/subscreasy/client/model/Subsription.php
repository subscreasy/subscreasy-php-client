<?php
/**
 * Subsription
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Api Documentation
 *
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\com.kodfarki.subscreasy.client.model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Subsription Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Subsription implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Subsription';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'applied_coupon' => '\Swagger\Client\com.kodfarki.subscreasy.client.model\Coupon',
        'cancel_date' => '\DateTime',
        'card' => '\Swagger\Client\com.kodfarki.subscreasy.client.model\SavedCard',
        'company' => '\Swagger\Client\com.kodfarki.subscreasy.client.model\Company',
        'end_date' => '\DateTime',
        'id' => 'int',
        'last_event' => 'string',
        'offer' => '\Swagger\Client\com.kodfarki.subscreasy.client.model\Offer',
        'payment_method' => 'string',
        'services' => '\Swagger\Client\com.kodfarki.subscreasy.client.model\ServiceInstance[]',
        'start_date' => '\DateTime',
        'status' => 'string',
        'subscriber' => '\Swagger\Client\com.kodfarki.subscreasy.client.model\Subscriber',
        'subscriber_secure_id' => 'string',
        'term_end_date' => '\DateTime',
        'term_start_date' => '\DateTime',
        'trial_end_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'applied_coupon' => null,
        'cancel_date' => 'date-time',
        'card' => null,
        'company' => null,
        'end_date' => 'date-time',
        'id' => 'int64',
        'last_event' => null,
        'offer' => null,
        'payment_method' => null,
        'services' => null,
        'start_date' => 'date-time',
        'status' => null,
        'subscriber' => null,
        'subscriber_secure_id' => null,
        'term_end_date' => 'date-time',
        'term_start_date' => 'date-time',
        'trial_end_date' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'applied_coupon' => 'appliedCoupon',
        'cancel_date' => 'cancelDate',
        'card' => 'card',
        'company' => 'company',
        'end_date' => 'endDate',
        'id' => 'id',
        'last_event' => 'lastEvent',
        'offer' => 'offer',
        'payment_method' => 'paymentMethod',
        'services' => 'services',
        'start_date' => 'startDate',
        'status' => 'status',
        'subscriber' => 'subscriber',
        'subscriber_secure_id' => 'subscriberSecureId',
        'term_end_date' => 'termEndDate',
        'term_start_date' => 'termStartDate',
        'trial_end_date' => 'trialEndDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'applied_coupon' => 'setAppliedCoupon',
        'cancel_date' => 'setCancelDate',
        'card' => 'setCard',
        'company' => 'setCompany',
        'end_date' => 'setEndDate',
        'id' => 'setId',
        'last_event' => 'setLastEvent',
        'offer' => 'setOffer',
        'payment_method' => 'setPaymentMethod',
        'services' => 'setServices',
        'start_date' => 'setStartDate',
        'status' => 'setStatus',
        'subscriber' => 'setSubscriber',
        'subscriber_secure_id' => 'setSubscriberSecureId',
        'term_end_date' => 'setTermEndDate',
        'term_start_date' => 'setTermStartDate',
        'trial_end_date' => 'setTrialEndDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'applied_coupon' => 'getAppliedCoupon',
        'cancel_date' => 'getCancelDate',
        'card' => 'getCard',
        'company' => 'getCompany',
        'end_date' => 'getEndDate',
        'id' => 'getId',
        'last_event' => 'getLastEvent',
        'offer' => 'getOffer',
        'payment_method' => 'getPaymentMethod',
        'services' => 'getServices',
        'start_date' => 'getStartDate',
        'status' => 'getStatus',
        'subscriber' => 'getSubscriber',
        'subscriber_secure_id' => 'getSubscriberSecureId',
        'term_end_date' => 'getTermEndDate',
        'term_start_date' => 'getTermStartDate',
        'trial_end_date' => 'getTrialEndDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const LAST_EVENT_STARTED = 'STARTED';
    const LAST_EVENT_RENEWED = 'RENEWED';
    const LAST_EVENT_RENEWAL_FAILED = 'RENEWAL_FAILED';
    const LAST_EVENT_FINISHED = 'FINISHED';
    const LAST_EVENT_CANCELLED = 'CANCELLED';
    const LAST_EVENT_SUBSCRIBER_CREATED = 'SUBSCRIBER_CREATED';
    const LAST_EVENT_SUBSCRIBER_UPDATED = 'SUBSCRIBER_UPDATED';
    const LAST_EVENT_TRIAL_ENDING = 'TRIAL_ENDING';
    const LAST_EVENT_PAYMENT_UPDATED = 'PAYMENT_UPDATED';
    const LAST_EVENT_IMMEDIATE_CANCELLATION_REQUESTED = 'IMMEDIATE_CANCELLATION_REQUESTED';
    const LAST_EVENT_ENDOFPERIOD_CANCELLATION_REQUESTED = 'ENDOFPERIOD_CANCELLATION_REQUESTED';
    const PAYMENT_METHOD_OFFLINE = 'OFFLINE';
    const PAYMENT_METHOD_CC = 'CC';
    const STATUS__NEW = 'NEW';
    const STATUS_ACTIVE = 'ACTIVE';
    const STATUS_SUSPENDED = 'SUSPENDED';
    const STATUS_FINISHED = 'FINISHED';
    const STATUS_CANCELLED = 'CANCELLED';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLastEventAllowableValues()
    {
        return [
            self::LAST_EVENT_STARTED,
            self::LAST_EVENT_RENEWED,
            self::LAST_EVENT_RENEWAL_FAILED,
            self::LAST_EVENT_FINISHED,
            self::LAST_EVENT_CANCELLED,
            self::LAST_EVENT_SUBSCRIBER_CREATED,
            self::LAST_EVENT_SUBSCRIBER_UPDATED,
            self::LAST_EVENT_TRIAL_ENDING,
            self::LAST_EVENT_PAYMENT_UPDATED,
            self::LAST_EVENT_IMMEDIATE_CANCELLATION_REQUESTED,
            self::LAST_EVENT_ENDOFPERIOD_CANCELLATION_REQUESTED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentMethodAllowableValues()
    {
        return [
            self::PAYMENT_METHOD_OFFLINE,
            self::PAYMENT_METHOD_CC,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS__NEW,
            self::STATUS_ACTIVE,
            self::STATUS_SUSPENDED,
            self::STATUS_FINISHED,
            self::STATUS_CANCELLED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['applied_coupon'] = isset($data['applied_coupon']) ? $data['applied_coupon'] : null;
        $this->container['cancel_date'] = isset($data['cancel_date']) ? $data['cancel_date'] : null;
        $this->container['card'] = isset($data['card']) ? $data['card'] : null;
        $this->container['company'] = isset($data['company']) ? $data['company'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['last_event'] = isset($data['last_event']) ? $data['last_event'] : null;
        $this->container['offer'] = isset($data['offer']) ? $data['offer'] : null;
        $this->container['payment_method'] = isset($data['payment_method']) ? $data['payment_method'] : null;
        $this->container['services'] = isset($data['services']) ? $data['services'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['subscriber'] = isset($data['subscriber']) ? $data['subscriber'] : null;
        $this->container['subscriber_secure_id'] = isset($data['subscriber_secure_id']) ? $data['subscriber_secure_id'] : null;
        $this->container['term_end_date'] = isset($data['term_end_date']) ? $data['term_end_date'] : null;
        $this->container['term_start_date'] = isset($data['term_start_date']) ? $data['term_start_date'] : null;
        $this->container['trial_end_date'] = isset($data['trial_end_date']) ? $data['trial_end_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['company'] === null) {
            $invalidProperties[] = "'company' can't be null";
        }
        $allowedValues = $this->getLastEventAllowableValues();
        if (!in_array($this->container['last_event'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'last_event', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['offer'] === null) {
            $invalidProperties[] = "'offer' can't be null";
        }
        $allowedValues = $this->getPaymentMethodAllowableValues();
        if (!in_array($this->container['payment_method'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'payment_method', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($this->container['status'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['company'] === null) {
            return false;
        }
        $allowedValues = $this->getLastEventAllowableValues();
        if (!in_array($this->container['last_event'], $allowedValues)) {
            return false;
        }
        if ($this->container['offer'] === null) {
            return false;
        }
        $allowedValues = $this->getPaymentMethodAllowableValues();
        if (!in_array($this->container['payment_method'], $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($this->container['status'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets applied_coupon
     *
     * @return \Swagger\Client\com.kodfarki.subscreasy.client.model\Coupon
     */
    public function getAppliedCoupon()
    {
        return $this->container['applied_coupon'];
    }

    /**
     * Sets applied_coupon
     *
     * @param \Swagger\Client\com.kodfarki.subscreasy.client.model\Coupon $applied_coupon applied_coupon
     *
     * @return $this
     */
    public function setAppliedCoupon($applied_coupon)
    {
        $this->container['applied_coupon'] = $applied_coupon;

        return $this;
    }

    /**
     * Gets cancel_date
     *
     * @return \DateTime
     */
    public function getCancelDate()
    {
        return $this->container['cancel_date'];
    }

    /**
     * Sets cancel_date
     *
     * @param \DateTime $cancel_date cancel_date
     *
     * @return $this
     */
    public function setCancelDate($cancel_date)
    {
        $this->container['cancel_date'] = $cancel_date;

        return $this;
    }

    /**
     * Gets card
     *
     * @return \Swagger\Client\com.kodfarki.subscreasy.client.model\SavedCard
     */
    public function getCard()
    {
        return $this->container['card'];
    }

    /**
     * Sets card
     *
     * @param \Swagger\Client\com.kodfarki.subscreasy.client.model\SavedCard $card card
     *
     * @return $this
     */
    public function setCard($card)
    {
        $this->container['card'] = $card;

        return $this;
    }

    /**
     * Gets company
     *
     * @return \Swagger\Client\com.kodfarki.subscreasy.client.model\Company
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param \Swagger\Client\com.kodfarki.subscreasy.client.model\Company $company company
     *
     * @return $this
     */
    public function setCompany($company)
    {
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime $end_date end_date
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets last_event
     *
     * @return string
     */
    public function getLastEvent()
    {
        return $this->container['last_event'];
    }

    /**
     * Sets last_event
     *
     * @param string $last_event last_event
     *
     * @return $this
     */
    public function setLastEvent($last_event)
    {
        $allowedValues = $this->getLastEventAllowableValues();
        if (!is_null($last_event) && !in_array($last_event, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'last_event', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['last_event'] = $last_event;

        return $this;
    }

    /**
     * Gets offer
     *
     * @return \Swagger\Client\com.kodfarki.subscreasy.client.model\Offer
     */
    public function getOffer()
    {
        return $this->container['offer'];
    }

    /**
     * Sets offer
     *
     * @param \Swagger\Client\com.kodfarki.subscreasy.client.model\Offer $offer offer
     *
     * @return $this
     */
    public function setOffer($offer)
    {
        $this->container['offer'] = $offer;

        return $this;
    }

    /**
     * Gets payment_method
     *
     * @return string
     */
    public function getPaymentMethod()
    {
        return $this->container['payment_method'];
    }

    /**
     * Sets payment_method
     *
     * @param string $payment_method payment_method
     *
     * @return $this
     */
    public function setPaymentMethod($payment_method)
    {
        $allowedValues = $this->getPaymentMethodAllowableValues();
        if (!is_null($payment_method) && !in_array($payment_method, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'payment_method', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_method'] = $payment_method;

        return $this;
    }

    /**
     * Gets services
     *
     * @return \Swagger\Client\com.kodfarki.subscreasy.client.model\ServiceInstance[]
     */
    public function getServices()
    {
        return $this->container['services'];
    }

    /**
     * Sets services
     *
     * @param \Swagger\Client\com.kodfarki.subscreasy.client.model\ServiceInstance[] $services services
     *
     * @return $this
     */
    public function setServices($services)
    {
        $this->container['services'] = $services;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime $start_date start_date
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets subscriber
     *
     * @return \Swagger\Client\com.kodfarki.subscreasy.client.model\Subscriber
     */
    public function getSubscriber()
    {
        return $this->container['subscriber'];
    }

    /**
     * Sets subscriber
     *
     * @param \Swagger\Client\com.kodfarki.subscreasy.client.model\Subscriber $subscriber subscriber
     *
     * @return $this
     */
    public function setSubscriber($subscriber)
    {
        $this->container['subscriber'] = $subscriber;

        return $this;
    }

    /**
     * Gets subscriber_secure_id
     *
     * @return string
     */
    public function getSubscriberSecureId()
    {
        return $this->container['subscriber_secure_id'];
    }

    /**
     * Sets subscriber_secure_id
     *
     * @param string $subscriber_secure_id subscriber_secure_id
     *
     * @return $this
     */
    public function setSubscriberSecureId($subscriber_secure_id)
    {
        $this->container['subscriber_secure_id'] = $subscriber_secure_id;

        return $this;
    }

    /**
     * Gets term_end_date
     *
     * @return \DateTime
     */
    public function getTermEndDate()
    {
        return $this->container['term_end_date'];
    }

    /**
     * Sets term_end_date
     *
     * @param \DateTime $term_end_date term_end_date
     *
     * @return $this
     */
    public function setTermEndDate($term_end_date)
    {
        $this->container['term_end_date'] = $term_end_date;

        return $this;
    }

    /**
     * Gets term_start_date
     *
     * @return \DateTime
     */
    public function getTermStartDate()
    {
        return $this->container['term_start_date'];
    }

    /**
     * Sets term_start_date
     *
     * @param \DateTime $term_start_date term_start_date
     *
     * @return $this
     */
    public function setTermStartDate($term_start_date)
    {
        $this->container['term_start_date'] = $term_start_date;

        return $this;
    }

    /**
     * Gets trial_end_date
     *
     * @return \DateTime
     */
    public function getTrialEndDate()
    {
        return $this->container['trial_end_date'];
    }

    /**
     * Sets trial_end_date
     *
     * @param \DateTime $trial_end_date trial_end_date
     *
     * @return $this
     */
    public function setTrialEndDate($trial_end_date)
    {
        $this->container['trial_end_date'] = $trial_end_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


