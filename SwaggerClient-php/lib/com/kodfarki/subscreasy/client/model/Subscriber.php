<?php
/**
 * Subscriber
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Api Documentation
 *
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\com.kodfarki.subscreasy.client.model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Subscriber Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Subscriber implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Subscriber';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'address' => 'string',
        'city' => 'string',
        'country' => 'string',
        'email' => 'string',
        'gsm_number' => 'string',
        'identity_number' => 'string',
        'ip' => 'string',
        'last_login_date' => 'string',
        'name' => 'string',
        'registration_date' => 'string',
        'secure_id' => 'string',
        'shipping_address' => 'string',
        'shipping_city' => 'string',
        'shipping_country' => 'string',
        'shipping_name' => 'string',
        'shipping_zip_code' => 'string',
        'surname' => 'string',
        'use_billing_address_for_shipping' => 'bool',
        'zip_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'address' => null,
        'city' => null,
        'country' => null,
        'email' => null,
        'gsm_number' => null,
        'identity_number' => null,
        'ip' => null,
        'last_login_date' => null,
        'name' => null,
        'registration_date' => null,
        'secure_id' => null,
        'shipping_address' => null,
        'shipping_city' => null,
        'shipping_country' => null,
        'shipping_name' => null,
        'shipping_zip_code' => null,
        'surname' => null,
        'use_billing_address_for_shipping' => null,
        'zip_code' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'address' => 'address',
        'city' => 'city',
        'country' => 'country',
        'email' => 'email',
        'gsm_number' => 'gsmNumber',
        'identity_number' => 'identityNumber',
        'ip' => 'ip',
        'last_login_date' => 'lastLoginDate',
        'name' => 'name',
        'registration_date' => 'registrationDate',
        'secure_id' => 'secureId',
        'shipping_address' => 'shippingAddress',
        'shipping_city' => 'shippingCity',
        'shipping_country' => 'shippingCountry',
        'shipping_name' => 'shippingName',
        'shipping_zip_code' => 'shippingZipCode',
        'surname' => 'surname',
        'use_billing_address_for_shipping' => 'useBillingAddressForShipping',
        'zip_code' => 'zipCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'address' => 'setAddress',
        'city' => 'setCity',
        'country' => 'setCountry',
        'email' => 'setEmail',
        'gsm_number' => 'setGsmNumber',
        'identity_number' => 'setIdentityNumber',
        'ip' => 'setIp',
        'last_login_date' => 'setLastLoginDate',
        'name' => 'setName',
        'registration_date' => 'setRegistrationDate',
        'secure_id' => 'setSecureId',
        'shipping_address' => 'setShippingAddress',
        'shipping_city' => 'setShippingCity',
        'shipping_country' => 'setShippingCountry',
        'shipping_name' => 'setShippingName',
        'shipping_zip_code' => 'setShippingZipCode',
        'surname' => 'setSurname',
        'use_billing_address_for_shipping' => 'setUseBillingAddressForShipping',
        'zip_code' => 'setZipCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'address' => 'getAddress',
        'city' => 'getCity',
        'country' => 'getCountry',
        'email' => 'getEmail',
        'gsm_number' => 'getGsmNumber',
        'identity_number' => 'getIdentityNumber',
        'ip' => 'getIp',
        'last_login_date' => 'getLastLoginDate',
        'name' => 'getName',
        'registration_date' => 'getRegistrationDate',
        'secure_id' => 'getSecureId',
        'shipping_address' => 'getShippingAddress',
        'shipping_city' => 'getShippingCity',
        'shipping_country' => 'getShippingCountry',
        'shipping_name' => 'getShippingName',
        'shipping_zip_code' => 'getShippingZipCode',
        'surname' => 'getSurname',
        'use_billing_address_for_shipping' => 'getUseBillingAddressForShipping',
        'zip_code' => 'getZipCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['gsm_number'] = isset($data['gsm_number']) ? $data['gsm_number'] : null;
        $this->container['identity_number'] = isset($data['identity_number']) ? $data['identity_number'] : null;
        $this->container['ip'] = isset($data['ip']) ? $data['ip'] : null;
        $this->container['last_login_date'] = isset($data['last_login_date']) ? $data['last_login_date'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['registration_date'] = isset($data['registration_date']) ? $data['registration_date'] : null;
        $this->container['secure_id'] = isset($data['secure_id']) ? $data['secure_id'] : null;
        $this->container['shipping_address'] = isset($data['shipping_address']) ? $data['shipping_address'] : null;
        $this->container['shipping_city'] = isset($data['shipping_city']) ? $data['shipping_city'] : null;
        $this->container['shipping_country'] = isset($data['shipping_country']) ? $data['shipping_country'] : null;
        $this->container['shipping_name'] = isset($data['shipping_name']) ? $data['shipping_name'] : null;
        $this->container['shipping_zip_code'] = isset($data['shipping_zip_code']) ? $data['shipping_zip_code'] : null;
        $this->container['surname'] = isset($data['surname']) ? $data['surname'] : null;
        $this->container['use_billing_address_for_shipping'] = isset($data['use_billing_address_for_shipping']) ? $data['use_billing_address_for_shipping'] : null;
        $this->container['zip_code'] = isset($data['zip_code']) ? $data['zip_code'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets address
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city city
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country country
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets gsm_number
     *
     * @return string
     */
    public function getGsmNumber()
    {
        return $this->container['gsm_number'];
    }

    /**
     * Sets gsm_number
     *
     * @param string $gsm_number gsm_number
     *
     * @return $this
     */
    public function setGsmNumber($gsm_number)
    {
        $this->container['gsm_number'] = $gsm_number;

        return $this;
    }

    /**
     * Gets identity_number
     *
     * @return string
     */
    public function getIdentityNumber()
    {
        return $this->container['identity_number'];
    }

    /**
     * Sets identity_number
     *
     * @param string $identity_number identity_number
     *
     * @return $this
     */
    public function setIdentityNumber($identity_number)
    {
        $this->container['identity_number'] = $identity_number;

        return $this;
    }

    /**
     * Gets ip
     *
     * @return string
     */
    public function getIp()
    {
        return $this->container['ip'];
    }

    /**
     * Sets ip
     *
     * @param string $ip ip
     *
     * @return $this
     */
    public function setIp($ip)
    {
        $this->container['ip'] = $ip;

        return $this;
    }

    /**
     * Gets last_login_date
     *
     * @return string
     */
    public function getLastLoginDate()
    {
        return $this->container['last_login_date'];
    }

    /**
     * Sets last_login_date
     *
     * @param string $last_login_date last_login_date
     *
     * @return $this
     */
    public function setLastLoginDate($last_login_date)
    {
        $this->container['last_login_date'] = $last_login_date;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets registration_date
     *
     * @return string
     */
    public function getRegistrationDate()
    {
        return $this->container['registration_date'];
    }

    /**
     * Sets registration_date
     *
     * @param string $registration_date registration_date
     *
     * @return $this
     */
    public function setRegistrationDate($registration_date)
    {
        $this->container['registration_date'] = $registration_date;

        return $this;
    }

    /**
     * Gets secure_id
     *
     * @return string
     */
    public function getSecureId()
    {
        return $this->container['secure_id'];
    }

    /**
     * Sets secure_id
     *
     * @param string $secure_id secure_id
     *
     * @return $this
     */
    public function setSecureId($secure_id)
    {
        $this->container['secure_id'] = $secure_id;

        return $this;
    }

    /**
     * Gets shipping_address
     *
     * @return string
     */
    public function getShippingAddress()
    {
        return $this->container['shipping_address'];
    }

    /**
     * Sets shipping_address
     *
     * @param string $shipping_address shipping_address
     *
     * @return $this
     */
    public function setShippingAddress($shipping_address)
    {
        $this->container['shipping_address'] = $shipping_address;

        return $this;
    }

    /**
     * Gets shipping_city
     *
     * @return string
     */
    public function getShippingCity()
    {
        return $this->container['shipping_city'];
    }

    /**
     * Sets shipping_city
     *
     * @param string $shipping_city shipping_city
     *
     * @return $this
     */
    public function setShippingCity($shipping_city)
    {
        $this->container['shipping_city'] = $shipping_city;

        return $this;
    }

    /**
     * Gets shipping_country
     *
     * @return string
     */
    public function getShippingCountry()
    {
        return $this->container['shipping_country'];
    }

    /**
     * Sets shipping_country
     *
     * @param string $shipping_country shipping_country
     *
     * @return $this
     */
    public function setShippingCountry($shipping_country)
    {
        $this->container['shipping_country'] = $shipping_country;

        return $this;
    }

    /**
     * Gets shipping_name
     *
     * @return string
     */
    public function getShippingName()
    {
        return $this->container['shipping_name'];
    }

    /**
     * Sets shipping_name
     *
     * @param string $shipping_name shipping_name
     *
     * @return $this
     */
    public function setShippingName($shipping_name)
    {
        $this->container['shipping_name'] = $shipping_name;

        return $this;
    }

    /**
     * Gets shipping_zip_code
     *
     * @return string
     */
    public function getShippingZipCode()
    {
        return $this->container['shipping_zip_code'];
    }

    /**
     * Sets shipping_zip_code
     *
     * @param string $shipping_zip_code shipping_zip_code
     *
     * @return $this
     */
    public function setShippingZipCode($shipping_zip_code)
    {
        $this->container['shipping_zip_code'] = $shipping_zip_code;

        return $this;
    }

    /**
     * Gets surname
     *
     * @return string
     */
    public function getSurname()
    {
        return $this->container['surname'];
    }

    /**
     * Sets surname
     *
     * @param string $surname surname
     *
     * @return $this
     */
    public function setSurname($surname)
    {
        $this->container['surname'] = $surname;

        return $this;
    }

    /**
     * Gets use_billing_address_for_shipping
     *
     * @return bool
     */
    public function getUseBillingAddressForShipping()
    {
        return $this->container['use_billing_address_for_shipping'];
    }

    /**
     * Sets use_billing_address_for_shipping
     *
     * @param bool $use_billing_address_for_shipping use_billing_address_for_shipping
     *
     * @return $this
     */
    public function setUseBillingAddressForShipping($use_billing_address_for_shipping)
    {
        $this->container['use_billing_address_for_shipping'] = $use_billing_address_for_shipping;

        return $this;
    }

    /**
     * Gets zip_code
     *
     * @return string
     */
    public function getZipCode()
    {
        return $this->container['zip_code'];
    }

    /**
     * Sets zip_code
     *
     * @param string $zip_code zip_code
     *
     * @return $this
     */
    public function setZipCode($zip_code)
    {
        $this->container['zip_code'] = $zip_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


