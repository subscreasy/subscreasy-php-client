<?php
/**
 * CompanyProps
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Api Documentation
 *
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\com.kodfarki.subscreasy.client.model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CompanyProps Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CompanyProps implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CompanyProps';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'api_key' => 'string',
        'callback_url' => 'string',
        'company' => '\Swagger\Client\com.kodfarki.subscreasy.client.model\Company',
        'id' => 'int',
        'payment_gateway_api_key' => 'string',
        'payment_gateway_security_key' => 'string',
        'payment_method' => 'string',
        'secure_key' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'api_key' => null,
        'callback_url' => null,
        'company' => null,
        'id' => 'int64',
        'payment_gateway_api_key' => null,
        'payment_gateway_security_key' => null,
        'payment_method' => null,
        'secure_key' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'api_key' => 'apiKey',
        'callback_url' => 'callbackUrl',
        'company' => 'company',
        'id' => 'id',
        'payment_gateway_api_key' => 'paymentGatewayApiKey',
        'payment_gateway_security_key' => 'paymentGatewaySecurityKey',
        'payment_method' => 'paymentMethod',
        'secure_key' => 'secureKey'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'api_key' => 'setApiKey',
        'callback_url' => 'setCallbackUrl',
        'company' => 'setCompany',
        'id' => 'setId',
        'payment_gateway_api_key' => 'setPaymentGatewayApiKey',
        'payment_gateway_security_key' => 'setPaymentGatewaySecurityKey',
        'payment_method' => 'setPaymentMethod',
        'secure_key' => 'setSecureKey'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'api_key' => 'getApiKey',
        'callback_url' => 'getCallbackUrl',
        'company' => 'getCompany',
        'id' => 'getId',
        'payment_gateway_api_key' => 'getPaymentGatewayApiKey',
        'payment_gateway_security_key' => 'getPaymentGatewaySecurityKey',
        'payment_method' => 'getPaymentMethod',
        'secure_key' => 'getSecureKey'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PAYMENT_METHOD_OFFLINE = 'OFFLINE';
    const PAYMENT_METHOD_IYZICO = 'IYZICO';
    const PAYMENT_METHOD_PAYU = 'PAYU';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentMethodAllowableValues()
    {
        return [
            self::PAYMENT_METHOD_OFFLINE,
            self::PAYMENT_METHOD_IYZICO,
            self::PAYMENT_METHOD_PAYU,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['api_key'] = isset($data['api_key']) ? $data['api_key'] : null;
        $this->container['callback_url'] = isset($data['callback_url']) ? $data['callback_url'] : null;
        $this->container['company'] = isset($data['company']) ? $data['company'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['payment_gateway_api_key'] = isset($data['payment_gateway_api_key']) ? $data['payment_gateway_api_key'] : null;
        $this->container['payment_gateway_security_key'] = isset($data['payment_gateway_security_key']) ? $data['payment_gateway_security_key'] : null;
        $this->container['payment_method'] = isset($data['payment_method']) ? $data['payment_method'] : null;
        $this->container['secure_key'] = isset($data['secure_key']) ? $data['secure_key'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getPaymentMethodAllowableValues();
        if (!in_array($this->container['payment_method'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'payment_method', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowedValues = $this->getPaymentMethodAllowableValues();
        if (!in_array($this->container['payment_method'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets api_key
     *
     * @return string
     */
    public function getApiKey()
    {
        return $this->container['api_key'];
    }

    /**
     * Sets api_key
     *
     * @param string $api_key api_key
     *
     * @return $this
     */
    public function setApiKey($api_key)
    {
        $this->container['api_key'] = $api_key;

        return $this;
    }

    /**
     * Gets callback_url
     *
     * @return string
     */
    public function getCallbackUrl()
    {
        return $this->container['callback_url'];
    }

    /**
     * Sets callback_url
     *
     * @param string $callback_url callback_url
     *
     * @return $this
     */
    public function setCallbackUrl($callback_url)
    {
        $this->container['callback_url'] = $callback_url;

        return $this;
    }

    /**
     * Gets company
     *
     * @return \Swagger\Client\com.kodfarki.subscreasy.client.model\Company
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param \Swagger\Client\com.kodfarki.subscreasy.client.model\Company $company company
     *
     * @return $this
     */
    public function setCompany($company)
    {
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets payment_gateway_api_key
     *
     * @return string
     */
    public function getPaymentGatewayApiKey()
    {
        return $this->container['payment_gateway_api_key'];
    }

    /**
     * Sets payment_gateway_api_key
     *
     * @param string $payment_gateway_api_key payment_gateway_api_key
     *
     * @return $this
     */
    public function setPaymentGatewayApiKey($payment_gateway_api_key)
    {
        $this->container['payment_gateway_api_key'] = $payment_gateway_api_key;

        return $this;
    }

    /**
     * Gets payment_gateway_security_key
     *
     * @return string
     */
    public function getPaymentGatewaySecurityKey()
    {
        return $this->container['payment_gateway_security_key'];
    }

    /**
     * Sets payment_gateway_security_key
     *
     * @param string $payment_gateway_security_key payment_gateway_security_key
     *
     * @return $this
     */
    public function setPaymentGatewaySecurityKey($payment_gateway_security_key)
    {
        $this->container['payment_gateway_security_key'] = $payment_gateway_security_key;

        return $this;
    }

    /**
     * Gets payment_method
     *
     * @return string
     */
    public function getPaymentMethod()
    {
        return $this->container['payment_method'];
    }

    /**
     * Sets payment_method
     *
     * @param string $payment_method payment_method
     *
     * @return $this
     */
    public function setPaymentMethod($payment_method)
    {
        $allowedValues = $this->getPaymentMethodAllowableValues();
        if (!is_null($payment_method) && !in_array($payment_method, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'payment_method', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_method'] = $payment_method;

        return $this;
    }

    /**
     * Gets secure_key
     *
     * @return string
     */
    public function getSecureKey()
    {
        return $this->container['secure_key'];
    }

    /**
     * Sets secure_key
     *
     * @param string $secure_key secure_key
     *
     * @return $this
     */
    public function setSecureKey($secure_key)
    {
        $this->container['secure_key'] = $secure_key;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


