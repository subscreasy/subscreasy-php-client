<?php
/**
 * SavedCard
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Api Documentation
 *
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\com.kodfarki.subscreasy.client.model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SavedCard Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SavedCard implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SavedCard';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'bin_number' => 'string',
        'card_alias' => 'string',
        'card_association' => 'string',
        'card_bank_code' => 'int',
        'card_bank_name' => 'string',
        'card_family' => 'string',
        'card_token' => 'string',
        'card_user_key' => 'string',
        'cart_type' => 'string',
        'id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'bin_number' => null,
        'card_alias' => null,
        'card_association' => null,
        'card_bank_code' => 'int64',
        'card_bank_name' => null,
        'card_family' => null,
        'card_token' => null,
        'card_user_key' => null,
        'cart_type' => null,
        'id' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bin_number' => 'binNumber',
        'card_alias' => 'cardAlias',
        'card_association' => 'cardAssociation',
        'card_bank_code' => 'cardBankCode',
        'card_bank_name' => 'cardBankName',
        'card_family' => 'cardFamily',
        'card_token' => 'cardToken',
        'card_user_key' => 'cardUserKey',
        'cart_type' => 'cartType',
        'id' => 'id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bin_number' => 'setBinNumber',
        'card_alias' => 'setCardAlias',
        'card_association' => 'setCardAssociation',
        'card_bank_code' => 'setCardBankCode',
        'card_bank_name' => 'setCardBankName',
        'card_family' => 'setCardFamily',
        'card_token' => 'setCardToken',
        'card_user_key' => 'setCardUserKey',
        'cart_type' => 'setCartType',
        'id' => 'setId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bin_number' => 'getBinNumber',
        'card_alias' => 'getCardAlias',
        'card_association' => 'getCardAssociation',
        'card_bank_code' => 'getCardBankCode',
        'card_bank_name' => 'getCardBankName',
        'card_family' => 'getCardFamily',
        'card_token' => 'getCardToken',
        'card_user_key' => 'getCardUserKey',
        'cart_type' => 'getCartType',
        'id' => 'getId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['bin_number'] = isset($data['bin_number']) ? $data['bin_number'] : null;
        $this->container['card_alias'] = isset($data['card_alias']) ? $data['card_alias'] : null;
        $this->container['card_association'] = isset($data['card_association']) ? $data['card_association'] : null;
        $this->container['card_bank_code'] = isset($data['card_bank_code']) ? $data['card_bank_code'] : null;
        $this->container['card_bank_name'] = isset($data['card_bank_name']) ? $data['card_bank_name'] : null;
        $this->container['card_family'] = isset($data['card_family']) ? $data['card_family'] : null;
        $this->container['card_token'] = isset($data['card_token']) ? $data['card_token'] : null;
        $this->container['card_user_key'] = isset($data['card_user_key']) ? $data['card_user_key'] : null;
        $this->container['cart_type'] = isset($data['cart_type']) ? $data['cart_type'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets bin_number
     *
     * @return string
     */
    public function getBinNumber()
    {
        return $this->container['bin_number'];
    }

    /**
     * Sets bin_number
     *
     * @param string $bin_number bin_number
     *
     * @return $this
     */
    public function setBinNumber($bin_number)
    {
        $this->container['bin_number'] = $bin_number;

        return $this;
    }

    /**
     * Gets card_alias
     *
     * @return string
     */
    public function getCardAlias()
    {
        return $this->container['card_alias'];
    }

    /**
     * Sets card_alias
     *
     * @param string $card_alias card_alias
     *
     * @return $this
     */
    public function setCardAlias($card_alias)
    {
        $this->container['card_alias'] = $card_alias;

        return $this;
    }

    /**
     * Gets card_association
     *
     * @return string
     */
    public function getCardAssociation()
    {
        return $this->container['card_association'];
    }

    /**
     * Sets card_association
     *
     * @param string $card_association card_association
     *
     * @return $this
     */
    public function setCardAssociation($card_association)
    {
        $this->container['card_association'] = $card_association;

        return $this;
    }

    /**
     * Gets card_bank_code
     *
     * @return int
     */
    public function getCardBankCode()
    {
        return $this->container['card_bank_code'];
    }

    /**
     * Sets card_bank_code
     *
     * @param int $card_bank_code card_bank_code
     *
     * @return $this
     */
    public function setCardBankCode($card_bank_code)
    {
        $this->container['card_bank_code'] = $card_bank_code;

        return $this;
    }

    /**
     * Gets card_bank_name
     *
     * @return string
     */
    public function getCardBankName()
    {
        return $this->container['card_bank_name'];
    }

    /**
     * Sets card_bank_name
     *
     * @param string $card_bank_name card_bank_name
     *
     * @return $this
     */
    public function setCardBankName($card_bank_name)
    {
        $this->container['card_bank_name'] = $card_bank_name;

        return $this;
    }

    /**
     * Gets card_family
     *
     * @return string
     */
    public function getCardFamily()
    {
        return $this->container['card_family'];
    }

    /**
     * Sets card_family
     *
     * @param string $card_family card_family
     *
     * @return $this
     */
    public function setCardFamily($card_family)
    {
        $this->container['card_family'] = $card_family;

        return $this;
    }

    /**
     * Gets card_token
     *
     * @return string
     */
    public function getCardToken()
    {
        return $this->container['card_token'];
    }

    /**
     * Sets card_token
     *
     * @param string $card_token card_token
     *
     * @return $this
     */
    public function setCardToken($card_token)
    {
        $this->container['card_token'] = $card_token;

        return $this;
    }

    /**
     * Gets card_user_key
     *
     * @return string
     */
    public function getCardUserKey()
    {
        return $this->container['card_user_key'];
    }

    /**
     * Sets card_user_key
     *
     * @param string $card_user_key card_user_key
     *
     * @return $this
     */
    public function setCardUserKey($card_user_key)
    {
        $this->container['card_user_key'] = $card_user_key;

        return $this;
    }

    /**
     * Gets cart_type
     *
     * @return string
     */
    public function getCartType()
    {
        return $this->container['cart_type'];
    }

    /**
     * Sets cart_type
     *
     * @param string $cart_type cart_type
     *
     * @return $this
     */
    public function setCartType($cart_type)
    {
        $this->container['cart_type'] = $cart_type;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


