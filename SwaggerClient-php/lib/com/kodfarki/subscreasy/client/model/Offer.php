<?php
/**
 * Offer
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Api Documentation
 *
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\com.kodfarki.subscreasy.client.model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Offer Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Offer implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Offer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'company' => '\Swagger\Client\com.kodfarki.subscreasy.client.model\Company',
        'id' => 'int',
        'name' => 'string',
        'open_ended' => 'bool',
        'price' => 'float',
        'recurrence' => '\Swagger\Client\com.kodfarki.subscreasy.client.model\RecurrencePeriod',
        'recurrence_count' => 'int',
        'secure_id' => 'string',
        'trial_period' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'company' => null,
        'id' => 'int64',
        'name' => null,
        'open_ended' => null,
        'price' => null,
        'recurrence' => null,
        'recurrence_count' => 'int32',
        'secure_id' => null,
        'trial_period' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'company' => 'company',
        'id' => 'id',
        'name' => 'name',
        'open_ended' => 'openEnded',
        'price' => 'price',
        'recurrence' => 'recurrence',
        'recurrence_count' => 'recurrenceCount',
        'secure_id' => 'secureId',
        'trial_period' => 'trialPeriod'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'company' => 'setCompany',
        'id' => 'setId',
        'name' => 'setName',
        'open_ended' => 'setOpenEnded',
        'price' => 'setPrice',
        'recurrence' => 'setRecurrence',
        'recurrence_count' => 'setRecurrenceCount',
        'secure_id' => 'setSecureId',
        'trial_period' => 'setTrialPeriod'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'company' => 'getCompany',
        'id' => 'getId',
        'name' => 'getName',
        'open_ended' => 'getOpenEnded',
        'price' => 'getPrice',
        'recurrence' => 'getRecurrence',
        'recurrence_count' => 'getRecurrenceCount',
        'secure_id' => 'getSecureId',
        'trial_period' => 'getTrialPeriod'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['company'] = isset($data['company']) ? $data['company'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['open_ended'] = isset($data['open_ended']) ? $data['open_ended'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['recurrence'] = isset($data['recurrence']) ? $data['recurrence'] : null;
        $this->container['recurrence_count'] = isset($data['recurrence_count']) ? $data['recurrence_count'] : null;
        $this->container['secure_id'] = isset($data['secure_id']) ? $data['secure_id'] : null;
        $this->container['trial_period'] = isset($data['trial_period']) ? $data['trial_period'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['company'] === null) {
            $invalidProperties[] = "'company' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['open_ended'] === null) {
            $invalidProperties[] = "'open_ended' can't be null";
        }
        if ($this->container['price'] === null) {
            $invalidProperties[] = "'price' can't be null";
        }
        if ($this->container['recurrence'] === null) {
            $invalidProperties[] = "'recurrence' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['company'] === null) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        if ($this->container['open_ended'] === null) {
            return false;
        }
        if ($this->container['price'] === null) {
            return false;
        }
        if ($this->container['recurrence'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets company
     *
     * @return \Swagger\Client\com.kodfarki.subscreasy.client.model\Company
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param \Swagger\Client\com.kodfarki.subscreasy.client.model\Company $company company
     *
     * @return $this
     */
    public function setCompany($company)
    {
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets open_ended
     *
     * @return bool
     */
    public function getOpenEnded()
    {
        return $this->container['open_ended'];
    }

    /**
     * Sets open_ended
     *
     * @param bool $open_ended open_ended
     *
     * @return $this
     */
    public function setOpenEnded($open_ended)
    {
        $this->container['open_ended'] = $open_ended;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float $price price
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets recurrence
     *
     * @return \Swagger\Client\com.kodfarki.subscreasy.client.model\RecurrencePeriod
     */
    public function getRecurrence()
    {
        return $this->container['recurrence'];
    }

    /**
     * Sets recurrence
     *
     * @param \Swagger\Client\com.kodfarki.subscreasy.client.model\RecurrencePeriod $recurrence recurrence
     *
     * @return $this
     */
    public function setRecurrence($recurrence)
    {
        $this->container['recurrence'] = $recurrence;

        return $this;
    }

    /**
     * Gets recurrence_count
     *
     * @return int
     */
    public function getRecurrenceCount()
    {
        return $this->container['recurrence_count'];
    }

    /**
     * Sets recurrence_count
     *
     * @param int $recurrence_count recurrence_count
     *
     * @return $this
     */
    public function setRecurrenceCount($recurrence_count)
    {
        $this->container['recurrence_count'] = $recurrence_count;

        return $this;
    }

    /**
     * Gets secure_id
     *
     * @return string
     */
    public function getSecureId()
    {
        return $this->container['secure_id'];
    }

    /**
     * Sets secure_id
     *
     * @param string $secure_id secure_id
     *
     * @return $this
     */
    public function setSecureId($secure_id)
    {
        $this->container['secure_id'] = $secure_id;

        return $this;
    }

    /**
     * Gets trial_period
     *
     * @return int
     */
    public function getTrialPeriod()
    {
        return $this->container['trial_period'];
    }

    /**
     * Sets trial_period
     *
     * @param int $trial_period trial_period
     *
     * @return $this
     */
    public function setTrialPeriod($trial_period)
    {
        $this->container['trial_period'] = $trial_period;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


