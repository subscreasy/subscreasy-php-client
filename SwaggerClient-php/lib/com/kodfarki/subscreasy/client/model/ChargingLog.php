<?php
/**
 * ChargingLog
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Api Documentation
 *
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\com.kodfarki.subscreasy.client.model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ChargingLog Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ChargingLog implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ChargingLog';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'applied_coupon' => 'int',
        'auth_code' => 'string',
        'company_id' => 'int',
        'create_date' => '\DateTime',
        'currency' => 'string',
        'error_code' => 'string',
        'error_text' => 'string',
        'id' => 'int',
        'invoice_id' => 'int',
        'job_id' => 'int',
        'offer_id' => 'int',
        'parent_id' => 'int',
        'payment_gateway' => 'string',
        'payment_id' => 'string',
        'price' => 'float',
        'reason' => 'string',
        'saved_card' => '\Swagger\Client\com.kodfarki.subscreasy.client.model\SavedCard',
        'saved_card_id' => 'int',
        'service_instance_id' => 'int',
        'status' => 'string',
        'subscriber_secure_id' => 'string',
        'subscription_id' => 'int',
        'transaction_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'applied_coupon' => 'int64',
        'auth_code' => null,
        'company_id' => 'int64',
        'create_date' => 'date-time',
        'currency' => null,
        'error_code' => null,
        'error_text' => null,
        'id' => 'int64',
        'invoice_id' => 'int64',
        'job_id' => 'int64',
        'offer_id' => 'int64',
        'parent_id' => 'int64',
        'payment_gateway' => null,
        'payment_id' => null,
        'price' => null,
        'reason' => null,
        'saved_card' => null,
        'saved_card_id' => 'int64',
        'service_instance_id' => 'int64',
        'status' => null,
        'subscriber_secure_id' => null,
        'subscription_id' => 'int64',
        'transaction_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'applied_coupon' => 'appliedCoupon',
        'auth_code' => 'authCode',
        'company_id' => 'companyId',
        'create_date' => 'createDate',
        'currency' => 'currency',
        'error_code' => 'errorCode',
        'error_text' => 'errorText',
        'id' => 'id',
        'invoice_id' => 'invoiceId',
        'job_id' => 'jobId',
        'offer_id' => 'offerId',
        'parent_id' => 'parentId',
        'payment_gateway' => 'paymentGateway',
        'payment_id' => 'paymentId',
        'price' => 'price',
        'reason' => 'reason',
        'saved_card' => 'savedCard',
        'saved_card_id' => 'savedCardId',
        'service_instance_id' => 'serviceInstanceId',
        'status' => 'status',
        'subscriber_secure_id' => 'subscriberSecureId',
        'subscription_id' => 'subscriptionId',
        'transaction_id' => 'transactionId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'applied_coupon' => 'setAppliedCoupon',
        'auth_code' => 'setAuthCode',
        'company_id' => 'setCompanyId',
        'create_date' => 'setCreateDate',
        'currency' => 'setCurrency',
        'error_code' => 'setErrorCode',
        'error_text' => 'setErrorText',
        'id' => 'setId',
        'invoice_id' => 'setInvoiceId',
        'job_id' => 'setJobId',
        'offer_id' => 'setOfferId',
        'parent_id' => 'setParentId',
        'payment_gateway' => 'setPaymentGateway',
        'payment_id' => 'setPaymentId',
        'price' => 'setPrice',
        'reason' => 'setReason',
        'saved_card' => 'setSavedCard',
        'saved_card_id' => 'setSavedCardId',
        'service_instance_id' => 'setServiceInstanceId',
        'status' => 'setStatus',
        'subscriber_secure_id' => 'setSubscriberSecureId',
        'subscription_id' => 'setSubscriptionId',
        'transaction_id' => 'setTransactionId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'applied_coupon' => 'getAppliedCoupon',
        'auth_code' => 'getAuthCode',
        'company_id' => 'getCompanyId',
        'create_date' => 'getCreateDate',
        'currency' => 'getCurrency',
        'error_code' => 'getErrorCode',
        'error_text' => 'getErrorText',
        'id' => 'getId',
        'invoice_id' => 'getInvoiceId',
        'job_id' => 'getJobId',
        'offer_id' => 'getOfferId',
        'parent_id' => 'getParentId',
        'payment_gateway' => 'getPaymentGateway',
        'payment_id' => 'getPaymentId',
        'price' => 'getPrice',
        'reason' => 'getReason',
        'saved_card' => 'getSavedCard',
        'saved_card_id' => 'getSavedCardId',
        'service_instance_id' => 'getServiceInstanceId',
        'status' => 'getStatus',
        'subscriber_secure_id' => 'getSubscriberSecureId',
        'subscription_id' => 'getSubscriptionId',
        'transaction_id' => 'getTransactionId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PAYMENT_GATEWAY_OFFLINE = 'OFFLINE';
    const PAYMENT_GATEWAY_IYZICO = 'IYZICO';
    const PAYMENT_GATEWAY_PAYU = 'PAYU';
    const PAYMENT_GATEWAY_PAYTR = 'PAYTR';
    const REASON_START = 'START';
    const REASON_RENEWAL = 'RENEWAL';
    const REASON_OVER_USAGE = 'OVER_USAGE';
    const REASON_REFUND = 'REFUND';
    const REASON_SAVE_CARD = 'SAVE_CARD';
    const REASON_TRIAL_PERIOD = 'TRIAL_PERIOD';
    const STATUS_NOT_PAID = 'NOT_PAID';
    const STATUS_PAID = 'PAID';
    const STATUS_FAIL = 'FAIL';
    const STATUS_REFUNDED = 'REFUNDED';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentGatewayAllowableValues()
    {
        return [
            self::PAYMENT_GATEWAY_OFFLINE,
            self::PAYMENT_GATEWAY_IYZICO,
            self::PAYMENT_GATEWAY_PAYU,
            self::PAYMENT_GATEWAY_PAYTR,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getReasonAllowableValues()
    {
        return [
            self::REASON_START,
            self::REASON_RENEWAL,
            self::REASON_OVER_USAGE,
            self::REASON_REFUND,
            self::REASON_SAVE_CARD,
            self::REASON_TRIAL_PERIOD,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_NOT_PAID,
            self::STATUS_PAID,
            self::STATUS_FAIL,
            self::STATUS_REFUNDED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['applied_coupon'] = isset($data['applied_coupon']) ? $data['applied_coupon'] : null;
        $this->container['auth_code'] = isset($data['auth_code']) ? $data['auth_code'] : null;
        $this->container['company_id'] = isset($data['company_id']) ? $data['company_id'] : null;
        $this->container['create_date'] = isset($data['create_date']) ? $data['create_date'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['error_code'] = isset($data['error_code']) ? $data['error_code'] : null;
        $this->container['error_text'] = isset($data['error_text']) ? $data['error_text'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['invoice_id'] = isset($data['invoice_id']) ? $data['invoice_id'] : null;
        $this->container['job_id'] = isset($data['job_id']) ? $data['job_id'] : null;
        $this->container['offer_id'] = isset($data['offer_id']) ? $data['offer_id'] : null;
        $this->container['parent_id'] = isset($data['parent_id']) ? $data['parent_id'] : null;
        $this->container['payment_gateway'] = isset($data['payment_gateway']) ? $data['payment_gateway'] : null;
        $this->container['payment_id'] = isset($data['payment_id']) ? $data['payment_id'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['reason'] = isset($data['reason']) ? $data['reason'] : null;
        $this->container['saved_card'] = isset($data['saved_card']) ? $data['saved_card'] : null;
        $this->container['saved_card_id'] = isset($data['saved_card_id']) ? $data['saved_card_id'] : null;
        $this->container['service_instance_id'] = isset($data['service_instance_id']) ? $data['service_instance_id'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['subscriber_secure_id'] = isset($data['subscriber_secure_id']) ? $data['subscriber_secure_id'] : null;
        $this->container['subscription_id'] = isset($data['subscription_id']) ? $data['subscription_id'] : null;
        $this->container['transaction_id'] = isset($data['transaction_id']) ? $data['transaction_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getPaymentGatewayAllowableValues();
        if (!in_array($this->container['payment_gateway'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'payment_gateway', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getReasonAllowableValues();
        if (!in_array($this->container['reason'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'reason', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($this->container['status'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowedValues = $this->getPaymentGatewayAllowableValues();
        if (!in_array($this->container['payment_gateway'], $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getReasonAllowableValues();
        if (!in_array($this->container['reason'], $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($this->container['status'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets applied_coupon
     *
     * @return int
     */
    public function getAppliedCoupon()
    {
        return $this->container['applied_coupon'];
    }

    /**
     * Sets applied_coupon
     *
     * @param int $applied_coupon applied_coupon
     *
     * @return $this
     */
    public function setAppliedCoupon($applied_coupon)
    {
        $this->container['applied_coupon'] = $applied_coupon;

        return $this;
    }

    /**
     * Gets auth_code
     *
     * @return string
     */
    public function getAuthCode()
    {
        return $this->container['auth_code'];
    }

    /**
     * Sets auth_code
     *
     * @param string $auth_code auth_code
     *
     * @return $this
     */
    public function setAuthCode($auth_code)
    {
        $this->container['auth_code'] = $auth_code;

        return $this;
    }

    /**
     * Gets company_id
     *
     * @return int
     */
    public function getCompanyId()
    {
        return $this->container['company_id'];
    }

    /**
     * Sets company_id
     *
     * @param int $company_id company_id
     *
     * @return $this
     */
    public function setCompanyId($company_id)
    {
        $this->container['company_id'] = $company_id;

        return $this;
    }

    /**
     * Gets create_date
     *
     * @return \DateTime
     */
    public function getCreateDate()
    {
        return $this->container['create_date'];
    }

    /**
     * Sets create_date
     *
     * @param \DateTime $create_date create_date
     *
     * @return $this
     */
    public function setCreateDate($create_date)
    {
        $this->container['create_date'] = $create_date;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets error_code
     *
     * @return string
     */
    public function getErrorCode()
    {
        return $this->container['error_code'];
    }

    /**
     * Sets error_code
     *
     * @param string $error_code error_code
     *
     * @return $this
     */
    public function setErrorCode($error_code)
    {
        $this->container['error_code'] = $error_code;

        return $this;
    }

    /**
     * Gets error_text
     *
     * @return string
     */
    public function getErrorText()
    {
        return $this->container['error_text'];
    }

    /**
     * Sets error_text
     *
     * @param string $error_text error_text
     *
     * @return $this
     */
    public function setErrorText($error_text)
    {
        $this->container['error_text'] = $error_text;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets invoice_id
     *
     * @return int
     */
    public function getInvoiceId()
    {
        return $this->container['invoice_id'];
    }

    /**
     * Sets invoice_id
     *
     * @param int $invoice_id invoice_id
     *
     * @return $this
     */
    public function setInvoiceId($invoice_id)
    {
        $this->container['invoice_id'] = $invoice_id;

        return $this;
    }

    /**
     * Gets job_id
     *
     * @return int
     */
    public function getJobId()
    {
        return $this->container['job_id'];
    }

    /**
     * Sets job_id
     *
     * @param int $job_id job_id
     *
     * @return $this
     */
    public function setJobId($job_id)
    {
        $this->container['job_id'] = $job_id;

        return $this;
    }

    /**
     * Gets offer_id
     *
     * @return int
     */
    public function getOfferId()
    {
        return $this->container['offer_id'];
    }

    /**
     * Sets offer_id
     *
     * @param int $offer_id offer_id
     *
     * @return $this
     */
    public function setOfferId($offer_id)
    {
        $this->container['offer_id'] = $offer_id;

        return $this;
    }

    /**
     * Gets parent_id
     *
     * @return int
     */
    public function getParentId()
    {
        return $this->container['parent_id'];
    }

    /**
     * Sets parent_id
     *
     * @param int $parent_id parent_id
     *
     * @return $this
     */
    public function setParentId($parent_id)
    {
        $this->container['parent_id'] = $parent_id;

        return $this;
    }

    /**
     * Gets payment_gateway
     *
     * @return string
     */
    public function getPaymentGateway()
    {
        return $this->container['payment_gateway'];
    }

    /**
     * Sets payment_gateway
     *
     * @param string $payment_gateway payment_gateway
     *
     * @return $this
     */
    public function setPaymentGateway($payment_gateway)
    {
        $allowedValues = $this->getPaymentGatewayAllowableValues();
        if (!is_null($payment_gateway) && !in_array($payment_gateway, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'payment_gateway', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_gateway'] = $payment_gateway;

        return $this;
    }

    /**
     * Gets payment_id
     *
     * @return string
     */
    public function getPaymentId()
    {
        return $this->container['payment_id'];
    }

    /**
     * Sets payment_id
     *
     * @param string $payment_id payment_id
     *
     * @return $this
     */
    public function setPaymentId($payment_id)
    {
        $this->container['payment_id'] = $payment_id;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float $price price
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return string
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param string $reason reason
     *
     * @return $this
     */
    public function setReason($reason)
    {
        $allowedValues = $this->getReasonAllowableValues();
        if (!is_null($reason) && !in_array($reason, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'reason', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets saved_card
     *
     * @return \Swagger\Client\com.kodfarki.subscreasy.client.model\SavedCard
     */
    public function getSavedCard()
    {
        return $this->container['saved_card'];
    }

    /**
     * Sets saved_card
     *
     * @param \Swagger\Client\com.kodfarki.subscreasy.client.model\SavedCard $saved_card saved_card
     *
     * @return $this
     */
    public function setSavedCard($saved_card)
    {
        $this->container['saved_card'] = $saved_card;

        return $this;
    }

    /**
     * Gets saved_card_id
     *
     * @return int
     */
    public function getSavedCardId()
    {
        return $this->container['saved_card_id'];
    }

    /**
     * Sets saved_card_id
     *
     * @param int $saved_card_id saved_card_id
     *
     * @return $this
     */
    public function setSavedCardId($saved_card_id)
    {
        $this->container['saved_card_id'] = $saved_card_id;

        return $this;
    }

    /**
     * Gets service_instance_id
     *
     * @return int
     */
    public function getServiceInstanceId()
    {
        return $this->container['service_instance_id'];
    }

    /**
     * Sets service_instance_id
     *
     * @param int $service_instance_id service_instance_id
     *
     * @return $this
     */
    public function setServiceInstanceId($service_instance_id)
    {
        $this->container['service_instance_id'] = $service_instance_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets subscriber_secure_id
     *
     * @return string
     */
    public function getSubscriberSecureId()
    {
        return $this->container['subscriber_secure_id'];
    }

    /**
     * Sets subscriber_secure_id
     *
     * @param string $subscriber_secure_id subscriber_secure_id
     *
     * @return $this
     */
    public function setSubscriberSecureId($subscriber_secure_id)
    {
        $this->container['subscriber_secure_id'] = $subscriber_secure_id;

        return $this;
    }

    /**
     * Gets subscription_id
     *
     * @return int
     */
    public function getSubscriptionId()
    {
        return $this->container['subscription_id'];
    }

    /**
     * Sets subscription_id
     *
     * @param int $subscription_id subscription_id
     *
     * @return $this
     */
    public function setSubscriptionId($subscription_id)
    {
        $this->container['subscription_id'] = $subscription_id;

        return $this;
    }

    /**
     * Gets transaction_id
     *
     * @return string
     */
    public function getTransactionId()
    {
        return $this->container['transaction_id'];
    }

    /**
     * Sets transaction_id
     *
     * @param string $transaction_id transaction_id
     *
     * @return $this
     */
    public function setTransactionId($transaction_id)
    {
        $this->container['transaction_id'] = $transaction_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


